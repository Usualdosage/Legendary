// <copyright file="Mobile.cs" company="Legendary™">
//  Copyright ©2021-2022 Legendary and Matthew Martin (Crypticant).
//  Use, reuse, and/or modification of this software requires
//  adherence to the included license file at
//  https://github.com/Usualdosage/Legendary.
//  Registered work by https://www.thelegendarygame.com.
//  This header must remain on all derived works.
// </copyright>

namespace Legendary.AreaBuilder.Types
{
    using System.ComponentModel;
    using System.ComponentModel.Design;
    using System.Drawing.Design;
    using Legendary.Core.Types;
    using MongoDB.Bson.Serialization.Attributes;
    using Newtonsoft.Json;

    /// <summary>
    /// Mobile class for the UI editor.
    /// </summary>
    [BsonIgnoreExtraElements]
    public class Mobile : Core.Models.Mobile
    {
        /// <inheritdoc/>
        [Browsable(false)]
        public override bool IsNPC { get => true; }

        /// <summary>
        /// Gets or sets the personality of the mobile.
        /// </summary>
        [Category("AI")]
        [Description("The general emotion of the mobile.")]
        public override Emotion? Emotion { get; set; } = Legendary.Core.Types.Emotion.Neutral;

        /// <summary>
        /// Gets or sets a value indicating whether or not this mobile should use the AI language processor.
        /// </summary>
        [Category("AI")]
        [Description("Whether to use the AI engine or not.")]
        public override bool UseAI { get; set; } = false;

        /// <summary>
        /// Gets or sets the persona file for the AI to consume.
        /// </summary>
        [Category("AI")]
        [Description("Which persona file should the AI consume.")]
        public override string? PersonaFile { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the first name.
        /// </summary>
        [Category("Description")]
        [Description("The first name of the mobile.")]
        public override string FirstName { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the middle name.
        /// </summary>
        [Category("Description")]
        [Description("The middle name of the mobile.")]
        public override string? MiddleName { get; set; }

        /// <summary>
        /// Gets or sets the last name.
        /// </summary>
        [Category("Description")]
        [Description("The last name of the mobile.")]
        public override string? LastName { get; set; }

        /// <summary>
        /// Gets or sets the title.
        /// </summary>
        [Category("Description")]
        [Description("The title of the mobile.")]
        public override string? Title { get; set; }

        /// <summary>
        /// Gets or sets the level.
        /// </summary>
        [Category("Personal")]
        [Description("The level of the mobile.")]
        public override int Level { get; set; } = 1;

        /// <summary>
        /// Gets or sets the short description.
        /// </summary>
        [Category("Description")]
        [Description("The short description of the mobile.")]
        public override string? ShortDescription { get; set; }

        /// <summary>
        /// Gets or sets the long description.
        /// </summary>
        [Category("Description")]
        [Description("The long description of the mobile. Can be autogenerated.")]
        [Editor(typeof(MultilineStringEditor), typeof(UITypeEditor))]
        public override string? LongDescription { get; set; }

        /// <summary>
        /// Gets or sets the health.
        /// </summary>
        [Browsable(false)]
        public override MaxCurrent Health { get; set; } = new MaxCurrent(20, 20);

        /// <summary>
        /// Gets or sets the health.
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        [Category("Vitals")]
        [Description("Total health of the mobile.")]
        public int HP { get => (int)this.Health.Max; set => this.Health = new MaxCurrent(value, value); }

        /// <summary>
        /// Gets or sets the player's strength.
        /// </summary>
        [Browsable(false)]
        public override MaxCurrent Str { get; set; } = new MaxCurrent(12, 12);

        /// <summary>
        /// Gets or sets the player's strength.
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        [Category("Vitals")]
        [Description("Total strength of the mobile.")]
        public int Strength { get => (int)this.Str.Max; set => this.Str = new MaxCurrent(value, value); }

        /// <summary>
        /// Gets or sets the player's intelligence.
        /// </summary>
        [Browsable(false)]
        public override MaxCurrent Int { get; set; } = new MaxCurrent(12, 12);

        /// <summary>
        /// Gets or sets the player's intelligence.
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        [Category("Vitals")]
        [Description("Total intelligence of the mobile.")]
        public int Intelligence { get => (int)this.Int.Max; set => this.Int = new MaxCurrent(value, value); }

        /// <summary>
        /// Gets or sets the player's wisdom.
        /// </summary>
        [Browsable(false)]
        public override MaxCurrent Wis { get; set; } = new MaxCurrent(12, 12);

        /// <summary>
        /// Gets or sets the player's wisdom.
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        [Category("Vitals")]
        [Description("Total wisdom of the mobile.")]
        public int Wisdom { get => (int)this.Wis.Max; set => this.Wis = new MaxCurrent(value, value); }

        /// <summary>
        /// Gets or sets the player's dexterity.
        /// </summary>
        [Browsable(false)]
        public override MaxCurrent Dex { get; set; } = new MaxCurrent(12, 12);

        /// <summary>
        /// Gets or sets the player's dexterity.
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        [Category("Vitals")]
        [Description("Total dexterity of the mobile.")]
        public int Dexterity { get => (int)this.Dex.Max; set => this.Dex = new MaxCurrent(value, value); }

        /// <summary>
        /// Gets or sets the player's constitution.
        /// </summary>
        [Browsable(false)]
        public override MaxCurrent Con { get; set; } = new MaxCurrent(12, 12);

        /// <summary>
        /// Gets or sets the player's constitution.
        /// </summary>
        [JsonIgnore]
        [BsonIgnore]
        [Category("Vitals")]
        [Description("Total constitution of the mobile.")]
        public int Constitution { get => (int)this.Con.Max; set => this.Con = new MaxCurrent(value, value); }

        /// <summary>
        /// Gets or sets the hit dice.
        /// </summary>
        [Category("CombatProcessor")]
        [Description("Number of hit dice.")]
        public override int HitDice
        {
            get; set;
        }

        = 0;

        /// <summary>
        /// Gets or sets the damage dice.
        /// </summary>
        [Category("CombatProcessor")]
        [Description("Number of damage dice.")]
        public override int DamageDice
        {
            get; set;
        }

        = 0;

        /// <summary>
        /// Gets the player's age.
        /// </summary>
        [Category("Personal")]
        [Description("The age in years of the mobile.")]
        public override int Age { get; } = 18;

        /// <summary>
        /// Gets or sets the alignment.
        /// </summary>
        [Category("Personal")]
        [Description("The alignment of the mobile.")]
        public override Alignment Alignment { get; set; } = Alignment.Neutral;

        /// <summary>
        /// Gets or sets the ethos.
        /// </summary>
        [Category("Personal")]
        [Description("The ethos of the mobile.")]
        public override Ethos Ethos { get; set; } = Ethos.Neutral;

        /// <summary>
        /// Gets or sets the gender.
        /// </summary>
        [Category("Personal")]
        [Description("The gender of the mobile.")]
        public override Gender Gender { get; set; } = Gender.Other;

        /// <summary>
        /// Gets or sets the race.
        /// </summary>
        [Category("Personal")]
        [Description("The race of the mobile.")]
        public override Race Race { get; set; } = Race.Human;

        /// <summary>
        /// Gets or sets flags applied to the mobile.
        /// </summary>
        [Category("Personal")]
        [Description("Mobile flags.")]
        public override List<MobileFlags>? MobileFlags { get; set; } = new List<MobileFlags>();

        /// <summary>
        /// Gets or sets the school type if this mob is a teacher.
        /// </summary>
        [Category("Personal")]
        [Description("The school type if this mob is a teacher.")]
        public override SchoolType? SchoolType { get; set; }

        /// <summary>
        /// Gets or sets the base-64 image for this character.
        /// </summary>
        [Category("Personal")]
        [Description("The image generated for this mobile.")]
        public override string? Image { get; set; }

        /// <summary>
        /// Gets or sets the player's equipment.
        /// </summary>
        [Category("Equipment")]
        [Description("Equipment worn by this mobile.")]
        public override List<EquipmentReset> EquipmentResets { get; set; } = new List<EquipmentReset>();

        /// <summary>
        /// Gets or sets the currency.
        /// </summary>
        [Category("Equipment")]
        [Description("Amount of currency this mobile has.")]
        public override decimal Currency { get; set; } = 0m;

        /// <summary>
        /// Gets or sets the save vs. spell.
        /// </summary>
        [Category("Saves")]
        [Description("Save versus spell (%).")]
        public override int SaveSpell
        {
            get; set;
        }

        = 2;

        /// <summary>
        /// Gets or sets the save vs. negative.
        /// </summary>
        [Category("Saves")]
        [Description("Save versus negative (%).")]
        public override int SaveNegative
        {
            get; set;
        }

        = 2;

        /// <summary>
        /// Gets or sets the save vs. maledictive.
        /// </summary>
        [Category("Saves")]
        [Description("Save versus maledictive (%).")]
        public override int SaveMaledictive
        {
            get; set;
        }

        = 2;

        /// <summary>
        /// Gets or sets the save vs. afflictive.
        /// </summary>
        [Category("Saves")]
        [Description("Save versus afflictive (%).")]
        public override int SaveAfflictive
        {
            get; set;
        }

        = 2;

        /// <summary>
        /// Gets or sets the save vs. death.
        /// </summary>
        [Category("Saves")]
        [Description("Save versus death (%).")]
        public override int SaveDeath
        {
            get; set;
        }

        = 2;
    }
}
